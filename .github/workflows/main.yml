# This is a basic workflow to help you get started with Actions

name: Build Plugin

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Build Plugin
        run: |
          cd Sources
          zip -r ../org.tynsoe.streamdeck.wsproxy.streamDeckPlugin org.tynsoe.streamdeck.wsproxy.sdPlugin
      
      - name: Get Version
        run: |
          version=`jq -r .Version Sources/org.tynsoe.streamdeck.wsproxy.sdPlugin/manifest.json`
          echo "::set-output name=VERSION::$version"
        id: get-version
        
      - name: Get changelog
        run: |
          changelog=`sed -n -E "/$tag/,/^\$/{/^#/{d;}; p;}" CHANGELOG.md`
          echo "::set-output name=CHANGELOG::$changelog"
        id: changelog
        
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ steps.get-version.outputs.VERSION }}
          release_name: Release v${{ steps.get-version.outputs.VERSION }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./org.tynsoe.streamdeck.wsproxy.streamDeckPlugin
          asset_name: org.tynsoe.streamdeck.wsproxy.streamDeckPlugin
          asset_content_type: application/zip
